// Code generated by GoVPP binapi-generator. DO NOT EDIT.
// source: api/lb.api.json

/*
Package lb is a generated VPP binary API of the 'lb' VPP module.

It is generated from this file:
	lb.api.json

It contains these VPP binary API objects:
	6 messages
	3 services
*/
package lb

import "git.fd.io/govpp.git/api"
import "github.com/lunixbochs/struc"
import "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = struc.Pack
var _ = bytes.NewBuffer

/* Messages */

// LbConf represents the VPP binary API message 'lb_conf'.
// Generated from 'lb.api.json', line 4:
//
//            "lb_conf",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u32",
//                "ip4_src_address"
//            ],
//            [
//                "u8",
//                "ip6_src_address",
//                16
//            ],
//            [
//                "u32",
//                "sticky_buckets_per_core"
//            ],
//            [
//                "u32",
//                "flow_timeout"
//            ],
//            {
//                "crc": "0x4ae4f864"
//            }
//
type LbConf struct {
	IP4SrcAddress        uint32
	IP6SrcAddress        []byte `struc:"[16]byte"`
	StickyBucketsPerCore uint32
	FlowTimeout          uint32
}

func (*LbConf) GetMessageName() string {
	return "lb_conf"
}
func (*LbConf) GetCrcString() string {
	return "4ae4f864"
}
func (*LbConf) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func NewLbConf() api.Message {
	return &LbConf{}
}

// LbConfReply represents the VPP binary API message 'lb_conf_reply'.
// Generated from 'lb.api.json', line 39:
//
//            "lb_conf_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type LbConfReply struct {
	Retval int32
}

func (*LbConfReply) GetMessageName() string {
	return "lb_conf_reply"
}
func (*LbConfReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LbConfReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func NewLbConfReply() api.Message {
	return &LbConfReply{}
}

// LbAddDelVip represents the VPP binary API message 'lb_add_del_vip'.
// Generated from 'lb.api.json', line 57:
//
//            "lb_add_del_vip",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u8",
//                "ip_prefix",
//                16
//            ],
//            [
//                "u8",
//                "prefix_length"
//            ],
//            [
//                "u8",
//                "encap"
//            ],
//            [
//                "u8",
//                "dscp"
//            ],
//            [
//                "u8",
//                "type"
//            ],
//            [
//                "u16",
//                "port"
//            ],
//            [
//                "u16",
//                "target_port"
//            ],
//            [
//                "u16",
//                "node_port"
//            ],
//            [
//                "u32",
//                "new_flows_table_length"
//            ],
//            [
//                "u8",
//                "is_del"
//            ],
//            {
//                "crc": "0xde8af3e8"
//            }
//
type LbAddDelVip struct {
	IPPrefix            []byte `struc:"[16]byte"`
	PrefixLength        uint8
	Encap               uint8
	Dscp                uint8
	Type                uint8
	Port                uint16
	TargetPort          uint16
	NodePort            uint16
	NewFlowsTableLength uint32
	IsDel               uint8
}

func (*LbAddDelVip) GetMessageName() string {
	return "lb_add_del_vip"
}
func (*LbAddDelVip) GetCrcString() string {
	return "de8af3e8"
}
func (*LbAddDelVip) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func NewLbAddDelVip() api.Message {
	return &LbAddDelVip{}
}

// LbAddDelVipReply represents the VPP binary API message 'lb_add_del_vip_reply'.
// Generated from 'lb.api.json', line 116:
//
//            "lb_add_del_vip_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type LbAddDelVipReply struct {
	Retval int32
}

func (*LbAddDelVipReply) GetMessageName() string {
	return "lb_add_del_vip_reply"
}
func (*LbAddDelVipReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LbAddDelVipReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func NewLbAddDelVipReply() api.Message {
	return &LbAddDelVipReply{}
}

// LbAddDelAs represents the VPP binary API message 'lb_add_del_as'.
// Generated from 'lb.api.json', line 134:
//
//            "lb_add_del_as",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u8",
//                "vip_ip_prefix",
//                16
//            ],
//            [
//                "u8",
//                "vip_prefix_length"
//            ],
//            [
//                "u8",
//                "as_address",
//                16
//            ],
//            [
//                "u8",
//                "is_del"
//            ],
//            {
//                "crc": "0x6de73722"
//            }
//
type LbAddDelAs struct {
	VipIPPrefix     []byte `struc:"[16]byte"`
	VipPrefixLength uint8
	AsAddress       []byte `struc:"[16]byte"`
	IsDel           uint8
}

func (*LbAddDelAs) GetMessageName() string {
	return "lb_add_del_as"
}
func (*LbAddDelAs) GetCrcString() string {
	return "6de73722"
}
func (*LbAddDelAs) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func NewLbAddDelAs() api.Message {
	return &LbAddDelAs{}
}

// LbAddDelAsReply represents the VPP binary API message 'lb_add_del_as_reply'.
// Generated from 'lb.api.json', line 170:
//
//            "lb_add_del_as_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type LbAddDelAsReply struct {
	Retval int32
}

func (*LbAddDelAsReply) GetMessageName() string {
	return "lb_add_del_as_reply"
}
func (*LbAddDelAsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*LbAddDelAsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func NewLbAddDelAsReply() api.Message {
	return &LbAddDelAsReply{}
}

/* Services */

type Services interface {
	LbAddDelAs(*LbAddDelAs) (*LbAddDelAsReply, error)
	LbAddDelVip(*LbAddDelVip) (*LbAddDelVipReply, error)
	LbConf(*LbConf) (*LbConfReply, error)
}

func init() {
	api.RegisterMessage((*LbConf)(nil), "lb.LbConf")
	api.RegisterMessage((*LbConfReply)(nil), "lb.LbConfReply")
	api.RegisterMessage((*LbAddDelVip)(nil), "lb.LbAddDelVip")
	api.RegisterMessage((*LbAddDelVipReply)(nil), "lb.LbAddDelVipReply")
	api.RegisterMessage((*LbAddDelAs)(nil), "lb.LbAddDelAs")
	api.RegisterMessage((*LbAddDelAsReply)(nil), "lb.LbAddDelAsReply")
}
